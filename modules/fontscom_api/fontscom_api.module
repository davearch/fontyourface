<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\fontyourface\Entity\Font;
use Drupal\Component\Utility\Unicode;
use Drupal\Component\Utility\Html;

define('FONTSCOM_API_BASE_URL', 'https://api.fonts.com');
define('FONTSCOM_API_APP_KEY', '1fdb130c-d5c0-4fab-8e2b-271508570323932606');

/**
 * Implements hook_fontyourface_api().
 */
function fontscom_api_fontyourface_api() {
  return [
    'version' => '3',
    'name' => 'Fonts.com',
  ];
}

/**
 * Implements hook_fontyourface_import().
 */
function fontscom_api_fontyourface_import() {
  $config = \Drupal::config('fontscom_api.settings');
  // Only get all fonts when we have set a project and token.
  if (!empty($config->get('token')) && !empty($config->get('project'))) {
  }
  else {
    drupal_set_message(t('Due to the number of fonts, automated import from install for Fonts.com is disabled. Please enter your Authentication Key and Project ID first before trying to import fonts.'));
  }
}

/**
 * Implements hook_form_alter().
 */
function fontscom_api_form_Font_settings_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('fontscom_api.settings');
  $form['fontscom_api'] = [
    '#type' => 'fieldset',
    '#title' => t('FONTS.COM SETTINGS'),
  ];
  $form['fontscom_api']['fontscom_api_token'] = [
    '#type' => 'textfield',
    '#title' => t('Fonts.com Authentication Key'),
    '#description' => t('Add your Fonts.com authentication key to import your projects. Available at <a target="_blank" href=":url">:url</a>', [':url' => 'https://www.fonts.com/account#authentification-section']),
    '#default_value' => $config->get('token'),
  ];

  if (!empty($config->get('token'))) {
    $projects = fontscom_api_get_projects();

    if (count($projects) > 0) {
      $options = ['' => '-- Select a project --'];
      foreach ($projects as $key => $project) {
        $options[$project->ProjectKey] = Html::escape($project->ProjectName);
      }
      $form['fontscom_api']['fontscom_api_project'] = [
        '#type' => 'select',
        '#title' => t('Project'),
        '#options' => $options,
        '#default_value' => $config->get('project'),
        '#required' => TRUE,
      ];
    }

    if (!empty($config->get('project'))) {
      $fontscom_api_fonts_count = fontscom_api_get_all_remote_fonts_count();
      drupal_set_message(t('There are up to @count fonts.com fonts available for import', ['@count' => $fontscom_api_fonts_count]));
    }
  }
  $form['#submit'][] = 'fontscom_api_form_font_settings_submit';
}

/**
 * Submits Font settings form data.
 */
function fontscom_api_form_font_settings_submit(&$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $config = \Drupal::configFactory()->getEditable('fontscom_api.settings');
  $config->set('token', $values['fontscom_api_token']);
  if (isset($values['fontscom_api_project'])) {
    $config->set('project', $values['fontscom_api_project']);
  }
  $config->save();
  drupal_set_message(t('Saved Fonts.com Authentication Key'));
}

/**
 * Provides headers with api parameters.
 */
function fontscom_api_headers($path) {
  $config = \Drupal::config('fontscom_api.settings');

  $fontscom_token = $config->get('token');

  if (empty($fontscom_token)) {
    return [];
  }

  list($public_key, $private_key) = explode('--', $fontscom_token);

  $encoded = base64_encode(hash_hmac('md5', $public_key . '|' . $path, $private_key, TRUE));
  $auth = urlencode($public_key . ':' . $encoded);

  return ['Authorization' => $auth, 'AppKey' => FONTSCOM_API_APP_KEY];

}

/**
 * Returns list of projects.
 */
function fontscom_api_get_projects() {
  $projects = [];
  try {
    $path = '/rest/json/Projects/?wfspstart=0&wfsplimit=100';
    $uri = FONTSCOM_API_BASE_URL . $path;
    $response = \Drupal::httpClient()->get($uri, ['headers' => fontscom_api_headers($path), 'verify' => FALSE]);
    $data = json_decode((string) $response->getBody());
  }
  catch (Exception $e) {
    drupal_set_message(t('There was an error retrieving project list from Fonts.com. Error: %error', ['%error' => $e->getMessage()]), 'error');
    return [];
  }

  if ($data->Projects->TotalRecords > 0) {
    $project = $data->Projects->Project;
    $projects = fontscom_api_unknown_to_array($project);
  }
  return $projects;
}

/**
 * Returns an array, regardless of input.
 */
function fontscom_api_unknown_to_array($unknown) {
  if (is_array($unknown)) {
    return $unknown;
  }

  return [$unknown];
}

/**
 * Retrieve a list of all fonts.
 */
function fontscom_api_get_all_fonts() {

}

/**
 * Gets total font count.
 */
function fontscom_api_get_all_remote_fonts_count() {
  try {
    $path = '/rest/json/AllFonts/?wfspstart=0&wfsplimit=1';
    $uri = FONTSCOM_API_BASE_URL . $path;
    $response = \Drupal::httpClient()->get($uri, ['headers' => fontscom_api_headers($path), 'verify' => FALSE]);
    $data = json_decode((string) $response->getBody());
  }
  catch (Exception $e) {
    drupal_set_message(t('There was an error retrieving total Font count from Fonts.com. Error: %error', ['%error' => $e->getMessage()]), 'error');
    return FALSE;
  }

  return $data->AllFonts->TotalRecords;
}
