<?php

/**
 * @file
 * Font Squirrel API module file.
 */

use Drupal\fontyourface\Entity\Font;

/**
 * Implements hook_page_attachments().
 */
function fontsquirrel_api_page_attachments(&$page) {
  $enabled_fonts = &drupal_static('fontyourface_fonts', []);
  $kits = [];
  foreach ($enabled_fonts as $font) {
    if ($font->pid->value == 'fontsquirrel_api' && $font->isEnabled()) {
      $directory_location = file_build_uri('fontyourface/fontsquirrel/' . _fontsquirrel_api_get_sanitized_css_family($font->css_family->value) . '-fontfacekit');
      $page['#attached']['html_head'][] = [
        [
          '#type' => 'html_tag',
          '#tag' => 'link',
          '#attributes' => [
            'rel' => 'stylesheet',
            'href' => file_create_url($directory_location . '/fontyourface-stylesheet.css'),
            'media' => 'all',
          ],
        ], 'fontsquirrel-api-' . $font->id(),
      ];
    }
  }
}


/**
 * Implements hook_entity_presave().
 */
function fontsquirrel_api_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof Drupal\fontyourface\Entity\Font) {
    if ($entity->pid->value == 'fontsquirrel_api' && $entity->isEnabled()) {
      $metadata = $entity->getMetadata();
      $directory_location = file_build_uri('fontyourface/fontsquirrel/' . _fontsquirrel_api_get_sanitized_css_family($entity->css_family->value) . '-fontfacekit');
      file_prepare_directory($directory_location, FILE_CREATE_DIRECTORY);
      $zip_location = file_build_uri('fontyourface/fontsquirrel/' . $metadata['path'] . '-fontfacekit.zip');
      // Throw an exception; make it hard if this fails.
      $uri = 'http://www.fontsquirrel.com/fontfacekit/' . $metadata['path'];
      $response = \Drupal::httpClient()->get($uri, ['headers' => ['Accept' => 'text/plain']]);
      if (!file_exists(drupal_realpath($zip_location))) {
        file_unmanaged_save_data($response->getBody(), $zip_location);
      }
      $files = [];
      $font_pathinfo = pathinfo($metadata['font_filename']);
      if ($zip = zip_open(drupal_realpath($zip_location))) {
        while ($entry = zip_read($zip)) {
          $entry_name = zip_entry_name($entry);
          $path_info = pathinfo($entry_name);
          if (strpos($path_info['filename'], $font_pathinfo['filename'] . '-webfont') !== FALSE && in_array($path_info['extension'], ['eot', 'ttf', 'woff', 'svg'])) {
            $files[$path_info['extension']] = $path_info['filename'] . '.' . $path_info['extension'];
            $data = zip_entry_read($entry, zip_entry_filesize($entry));
            file_unmanaged_save_data($data, $directory_location . '/' . $path_info['filename'] . '.' . $path_info['extension'], FILE_EXISTS_OVERWRITE);
          }
          zip_entry_close($entry);
        }
        zip_close($zip);
      }
      if (!empty($files)) {
        $css_file = _fontsquirrel_api_generate_fontfamily_css_stylesheet($entity->css_family->value, $files);
        file_unmanaged_save_data($css_file, $directory_location . '/fontyourface-stylesheet.css', FILE_EXISTS_OVERWRITE);
      }
    }
  }
}

/**
 * Implements hook_fontyourface_api()
 */
function fontsquirrel_api_fontyourface_api() {
  return [
    'version' => '3',
    'name' => 'Font Squirrel',
  ];
}

/**
 * Implements hook_fontyourface_import().
 */
function fontsquirrel_api_fontyourface_import() {
  // Until we figure out batch api for D8.
  @set_time_limit(3600);

  try {
    $uri = 'https://www.fontsquirrel.com/api/fontlist/all';
    $response = \Drupal::httpClient()->get($uri, ['headers' => ['Accept' => 'text/plain']]);
    $data = json_decode($response->getBody());
  }
  catch (RequestException $e) {
    drupal_set_message(t('There was an error downloading font list from Font Squirrel.'), 'error');
    fontyourface_log('Invalid drupal_http_request response: @response', ['@response' => $e->getMessage()]);
    return FALSE;
  }

  $fonts = [];
  $count = 0;
  foreach ($data as $font_import) {
    $metadata = [
      'id' => $font_import->id,
      'path' => $font_import->family_urlname,
      'font_filename' => $font_import->font_filename,
    ];
    $font = new stdClass();
    $font->name = $font_import->family_name;
    $font->url = 'https://www.fontsquirrel.com/fonts/' . $font_import->family_urlname;
    $font->provider = 'fontsquirrel_api';
    $font->css_family = $font_import->family_urlname . 'regular';
    // Font Squirrel fonts have no concept of normal/bold/light/italics fonts.
    $font->css_weight = 400;
    $font->css_style = 'normal';
    $font->foundry = $font_import->foundry_name;
    $font->foundry_url = 'https://www.fontsquirrel.com/foundry/' . $font_import->foundry_urlname;
    $font->license = 'See Font Squirrel license page';
    $font->license_url = $font->url . '#eula';
    $font->metadata = serialize($metadata);
    if ($font_import->family_count > 1) {
      $variants = fontsquirrel_api_get_font_family_info($font_import);
      foreach ($variants as $key => $variant) {
        $count++;
        $variant_metadata = $metadata;
        $variant_metadata['font_filename'] = $variant->filename;
        $variant_font = clone $font;
        $variant_font->name = $variant->family_name . ' ' . $variant->style_name;
        $variant_font->url = $font->url . '#' . $variant->fontface_name;
        $variant_font->css_family = $variant->fontface_name;
        $variant_font->metadata = serialize($variant_metadata);
        $fonts[] = $variant_font;
        fontyourface_save_font($variant_font);
      }
    }
    else {
      $count++;
      $fonts[] = $font;
      fontyourface_save_font($font);
    }
  }
  if ($count) {
    drupal_set_message(t("@count fonts (and variants) imported from Font Squirrel", ['@count' => $count]));
  }
}

function fontsquirrel_api_get_font_family_info($font_import) {
  try {
    $uri = 'http://www.fontsquirrel.com/api/familyinfo/' . $font_import->family_urlname;
    $response = \Drupal::httpClient()->get($uri, ['headers' => ['Accept' => 'text/plain']]);
    $data = json_decode($response->getBody());
  }
  catch (RequestException $e) {
    drupal_set_message(t('There was an error downloading font list from Font Squirrel.'), 'error');
    fontyourface_log('Invalid drupal_http_request response: @response', ['@response' => $e->getMessage()]);
    return FALSE;
  }
  return $data;
}

function _fontsquirrel_api_get_sanitized_css_family($css_family) {
  return preg_replace("/[^A-Za-z0-9\-]/", '', $css_family);
}

function _fontsquirrel_api_generate_fontfamily_css_stylesheet($css_family, $files) {
  $data = "@font-face {\n";
  $data .= "font-family: '{$css_family}';\n";
  $lines = [];

  if ($files['eot']) {
    $data .= "src: url('{$files['eot']}');\n";
    $lines[] = "url('{$files['eot']}?#iefix') format('embedded-opentype')";
  }
  if ($files['ttf']) {
    $lines[] = "url('{$files['ttf']}') format('truetype')";
  }
  if ($files['woff']) {
    $lines[] = "url('{$files['woff']}') format('woff')";
  }
  if ($files['svg']) {
    $lines[] = "url('{$files['svg']}#{$css_family}') format('svg')";
  }

  $data .= 'src: ' . implode(', ', $lines) . ";\n";
  $data .= "font-weight: normal;\n";
  $data .= "font-style: normal;\n";
  return $data . "}\n";
}